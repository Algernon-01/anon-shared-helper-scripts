#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -o pipefail
set -e errtrace

error_handler() {
   local exit_code="$?"
   echo "\
BASH_COMMAND: $BASH_COMMAND
exit_code: $exit_code"
}

trap "error_handler" ERR

source /usr/lib/anon-shared-helper-scripts/tor_enabled_check
source /usr/lib/anon-shared-helper-scripts/pkg_manager_running_check
source /usr/lib/anon-shared-helper-scripts/tor_bootstrap_check.bsh

te_pe_tb_check() {
   if [ -f "/usr/share/anon-gw-base-files/gateway" ]; then
      VM="Gateway"
   elif [ -f "/usr/share/anon-ws-base-files/workstation" ]; then
      VM="Workstation"
   else
      VM="Could not determine if this is gateway or workstation. Please report this bug."
   fi

   ## Debugging.
   true "$FUNCNAME: CURL: $CURL"
   true "$FUNCNAME: LD_PRELOAD: $LD_PRELOAD"

   ## Sets: TOR_ENABLED
   check_tor_enabled_do

   if [ "$TOR_ENABLED" = "1" ]; then
      ## Ok.
      true
   else
      if [ -f /usr/share/whonix/marker ]; then
         echo "<b>Tor is disabled.</b> Please enable Tor using whonixsetup.<br> \
Start Menu -> Applications -> System -> whonixsetup - Connection Wizard or in Terminal: sudo whonixsetup"
      else
         echo "Tor is disabled. Please enable Tor in /etc/tor/torrc."
      fi

      exit "2"
   fi

   ## sets: check_apt_get_exit_code
   ## sets: package_manager_waiting_msg
   #check_package_manager_running_helper ## pkg_manager_running_check
   #if [ "$check_apt_get_exit_code" = "0" ]; then
      #true "Package manager not busy, ok."
   #else
      #echo "$package_manager_waiting_msg"

      #exit "2"
   #fi

   ## sets: check_bootstrap_helper_script
   ## sets: lastpid
   ## sets: tor_bootstrap_percent
   ## sets: tor_bootstrap_status
   check_tor_circuit_established ## tor_bootstrap_check.bsh

   ## $tor_circuit_established_check_exit_code on timeout returns:
   ## - 124 if sigterm was sufficient
   ## - 137 if needed to use kill.

   for invalid_exit_code in "124" "137" "254" ; do
      if [ "$tor_circuit_established_check_exit_code" = "$invalid_exit_code" ]; then
         echo "Tor Bootstrap Result: \
   <b>ERROR ($tor_circuit_established_check_exit_code).</b><br> Please report this bug!"
         exit "2"
      fi
   done

   if [ "$tor_circuit_established_check_exit_code" = "255" ]; then
      if [ "$VM" = "Gateway" ]; then
         echo "Tor Bootstrap Result: \
<b>Tor's Control Port could not be reached.</b><br>"
      elif [ "$VM" = "Workstation" ]; then
         if [ -f /usr/share/whonix/marker ]; then
            echo "Tor Bootstrap Result: \
<b>Tor's Control Port could not be reached.</b><br> \
<br>Did you start Gateway beforehand? \
<br>Please run whonixcheck on Gateway."
         else
            echo "Tor Bootstrap Result: \
<b>Tor's Control Port could not be reached.</b><br> \
<br>Did you start Gateway beforehand?"
         fi
      else
         if [ -f /usr/share/whonix/marker ]; then
            echo "Tor Bootstrap Result: \
<b>Tor's Control Port could not be reached.</b><br> \
<br>Did you start Gateway beforehand? \
<br>Please run whonixcheck on Gateway.
<br>$FUNCNAME: This is neither a gateway nor a workstation. Please report this bug!"
         else
            echo "Tor Bootstrap Result: \
<b>Tor's Control Port could not be reached.</b><br> \
<br>Did you start Gateway beforehand?
<br>$FUNCNAME: This is neither a gateway nor a workstation. Please report this bug!"
         fi
      fi

      exit "2"
   fi

   if [ "$VM" = "Gateway" ]; then
      check_tor_bootstrap_status
   fi

   ## sets: tor_consensus_valid_after_exit_code
   ## sets: tor_consensus_valid_after_output
   ## sets: tor_consensus_valid_after_unixtime
   tor_consensus_valid-after

   ## sets: tor_consensus_valid_until_exit_code
   ## sets: tor_consensus_valid_until_output
   ## sets: tor_consensus_valid_until_unixtime
   tor_consensus_valid-until

   current_unixtime="$(date +"%s")"

   if [ "$tor_consensus_valid_after_exit_code" = "0" ] && [ "$tor_consensus_valid_until_exit_code" = "0" ]; then
      if [ "$current_unixtime" -ge "$tor_consensus_valid_after_unixtime" ]; then
         true
      else
         clock_tor_consensus_check_result="slow"
         clock_tor_consensus_check_msg="Clock is slow. Clock is slower than consensus/valid-after $tor_consensus_valid_after_output."
      fi
      if [ "$current_unixtime" -ge "$tor_consensus_valid_until_unixtime" ]; then
         clock_tor_consensus_check_result="Clock is fast. Clock is faster than consensus/valid-until $tor_consensus_valid_until_output."
      else
         true
      fi
   else
      clock_tor_consensus_check_result="error"
      clock_tor_consensus_check_msg"Consensus time sanity check failed."
   fi

   if [ "$clock_tor_consensus_check_result" = "" ]; then
      clock_tor_consensus_check_result="ok"
      clock_tor_consensus_check_msg="Clock within consensus parameters consensus/valid-after $tor_consensus_valid_after_output and consensus/valid-until $tor_consensus_valid_until_output."
   fi

   echo "$clock_tor_consensus_check_msg"

   ## TODO: maybe only useful on the gateway
   if [ ! "$clock_tor_consensus_check_result" = "ok" ]; then
      exit "2"
   fi

   if [ "$tor_circuit_established" = "1" ]; then
      echo "Tor fully bootstrapped."
      exit "0"
   fi

   if [ "$VM" = "Gateway" ]; then
      echo "<b>Tor is not yet fully bootstrapped.</b> $tor_circuit_established_check_exit_code % done.\
<br>Tor reports: $tor_bootstrap_status"
   else
      echo "<b>Tor is not yet fully bootstrapped.</b> Tor circuit: $tor_circuit_established_word."
   fi
   exit "2"
}

te_pe_tb_check "$@"
